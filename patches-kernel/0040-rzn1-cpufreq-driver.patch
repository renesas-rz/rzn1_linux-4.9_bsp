From d19962f779d31155c584e1fb9cb8b3a6e8492edf Mon Sep 17 00:00:00 2001
From: Michel Pollet <michel.pollet@bp.renesas.com>
Date: Tue, 14 Jul 2015 10:15:00 +0100
Subject: [PATCH] rzn1: cpufreq driver

Support for the cpu frequency changes for RZ/N1

Signed-off-by: Michel Pollet <michel.pollet@bp.renesas.com>
---
 drivers/cpufreq/Kconfig.arm    |  5 +++
 drivers/cpufreq/Makefile       |  3 +-
 drivers/cpufreq/rzn1-cpufreq.c | 89 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 96 insertions(+), 1 deletion(-)
 create mode 100644 drivers/cpufreq/rzn1-cpufreq.c

diff --git a/drivers/cpufreq/Kconfig.arm b/drivers/cpufreq/Kconfig.arm
index d89b8af..4be71a0 100644
--- a/drivers/cpufreq/Kconfig.arm
+++ b/drivers/cpufreq/Kconfig.arm
@@ -88,6 +88,11 @@ config ARM_OMAP2PLUS_CPUFREQ
 	depends on ARCH_OMAP2PLUS
 	default ARCH_OMAP2PLUS
 
+config ARM_RZN1_CPUFREQ
+	bool "Renesas RZN1"
+	depends on ARCH_RZN1
+	default ARCH_RZN1
+
 config ARM_S3C_CPUFREQ
 	bool
 	help
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 0a9b6a09..006ef68 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -4,7 +4,7 @@ obj-$(CONFIG_CPU_FREQ)			+= cpufreq.o freq_table.o
 # CPUfreq stats
 obj-$(CONFIG_CPU_FREQ_STAT)             += cpufreq_stats.o
 
-# CPUfreq governors 
+# CPUfreq governors
 obj-$(CONFIG_CPU_FREQ_GOV_PERFORMANCE)	+= cpufreq_performance.o
 obj-$(CONFIG_CPU_FREQ_GOV_POWERSAVE)	+= cpufreq_powersave.o
 obj-$(CONFIG_CPU_FREQ_GOV_USERSPACE)	+= cpufreq_userspace.o
@@ -62,6 +62,7 @@ obj-$(CONFIG_ARM_MT8173_CPUFREQ)	+= mt8173-cpufreq.o
 obj-$(CONFIG_ARM_OMAP2PLUS_CPUFREQ)	+= omap-cpufreq.o
 obj-$(CONFIG_ARM_PXA2xx_CPUFREQ)	+= pxa2xx-cpufreq.o
 obj-$(CONFIG_PXA3xx)			+= pxa3xx-cpufreq.o
+obj-$(CONFIG_ARM_RZN1_CPUFREQ)		+= rzn1-cpufreq.o
 obj-$(CONFIG_ARM_S3C24XX_CPUFREQ)	+= s3c24xx-cpufreq.o
 obj-$(CONFIG_ARM_S3C24XX_CPUFREQ_DEBUGFS) += s3c24xx-cpufreq-debugfs.o
 obj-$(CONFIG_ARM_S3C2410_CPUFREQ)	+= s3c2410-cpufreq.o
diff --git a/drivers/cpufreq/rzn1-cpufreq.c b/drivers/cpufreq/rzn1-cpufreq.c
new file mode 100644
index 0000000..37c79d0
--- /dev/null
+++ b/drivers/cpufreq/rzn1-cpufreq.c
@@ -0,0 +1,89 @@
+/*
+ * Clock scaling for the Renesas RZ/N1
+ *
+ * Copyright (C) 2014 Renesas Electronics Europe Limited
+ *
+ * Michel Pollet <michel.pollet@bp.renesas.com>, <buserror@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/clk.h>
+#include <linux/cpufreq.h>
+#include <linux/clk-provider.h>
+#include <linux/printk.h>
+
+static struct cpufreq_driver rzn1_driver;
+
+/* make sure that only the "userspace" governor is run
+ * -- anything else wouldn't make sense on this platform, anyway.
+ */
+static int rzn1_verify_speed(struct cpufreq_policy *policy)
+{
+	if (policy->cpu)
+		return -EINVAL;
+
+	cpufreq_verify_within_cpu_limits(policy);
+	return 0;
+}
+
+static int rzn1_target(struct cpufreq_policy *policy,
+			 unsigned int target_freq,
+			 unsigned int relation)
+{
+	struct cpufreq_freqs freqs;
+	int ret;
+
+	pr_debug("%s switching to %d.%02dMHz\n", __func__,
+		target_freq / 1000, (target_freq / 10) % 100);
+	freqs.old = policy->cur;
+	freqs.new = target_freq;
+
+	cpufreq_freq_transition_begin(policy, &freqs);
+	ret = clk_set_rate(policy->clk, target_freq * 1000);
+	cpufreq_freq_transition_end(policy, &freqs, ret);
+
+	return ret;
+}
+
+static int rzn1_cpu_init(struct cpufreq_policy *policy)
+{
+	struct clk *ref_clk, *cpu_clk;
+
+	if (policy->cpu != 0)
+		return -EINVAL;
+	/* Could use clk_get_parent() here?
+	 * I hoped to be able to get access to 'cpu' dts node from here,
+	 * and derive the div_ca7 clock from the 'clocks' property there,
+	 * but it looked a bit too involved, so this is hard coded instead. */
+	cpu_clk = __clk_lookup("div_ca7");
+	ref_clk = __clk_lookup("div_ref_sync");
+
+	policy->max = policy->cpuinfo.max_freq = clk_get_rate(ref_clk) / 1000;
+	policy->min = policy->cpuinfo.min_freq = policy->max / 4;
+	policy->cpuinfo.transition_latency = 20 * 1000;
+	policy->clk = cpu_clk;
+	return PTR_ERR_OR_ZERO(policy->clk);
+}
+
+static struct cpufreq_driver rzn1_driver = {
+	.flags		= CPUFREQ_STICKY | CPUFREQ_CONST_LOOPS,
+	.verify		= rzn1_verify_speed,
+	.target		= rzn1_target,
+	.get		= cpufreq_generic_get,
+	.init		= rzn1_cpu_init,
+	.name		= "rzn1",
+};
+
+static int __init rzn1_cpufreq_init(void)
+{
+	return cpufreq_register_driver(&rzn1_driver);
+}
+
+subsys_initcall(rzn1_cpufreq_init);
-- 
2.7.4

