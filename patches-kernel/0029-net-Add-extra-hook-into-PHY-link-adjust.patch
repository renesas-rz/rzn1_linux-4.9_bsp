From 495112de5a5e11f97162c5bf551d719b841f85d5 Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Wed, 23 Mar 2016 13:45:09 +0000
Subject: [PATCH] net: Add extra hook into PHY link adjust

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 drivers/net/phy/phy.c        | 24 ++++++++++++++++--------
 drivers/net/phy/phy_device.c |  8 ++++++++
 include/linux/phy.h          |  5 +++++
 3 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index f424b86..e5909a2 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -911,6 +911,14 @@ void phy_start(struct phy_device *phydev)
 }
 EXPORT_SYMBOL(phy_start);
 
+static void phydev_adjust_link(struct phy_device *phydev)
+{
+	if (phydev->pre_adjust_link)
+		phydev->pre_adjust_link(phydev->pre_adjust_link_priv);
+
+	phydev->adjust_link(phydev->attached_dev);
+}
+
 /**
  * phy_state_machine - Handle the state machine
  * @work: work_struct that describes the work to be done
@@ -953,7 +961,7 @@ void phy_state_machine(struct work_struct *work)
 		if (!phydev->link) {
 			phydev->state = PHY_NOLINK;
 			netif_carrier_off(phydev->attached_dev);
-			phydev->adjust_link(phydev->attached_dev);
+			phydev_adjust_link(phydev);
 			break;
 		}
 
@@ -966,7 +974,7 @@ void phy_state_machine(struct work_struct *work)
 		if (err > 0) {
 			phydev->state = PHY_RUNNING;
 			netif_carrier_on(phydev->attached_dev);
-			phydev->adjust_link(phydev->attached_dev);
+			phydev_adjust_link(phydev);
 
 		} else if (0 == phydev->link_timeout--)
 			needs_aneg = true;
@@ -993,7 +1001,7 @@ void phy_state_machine(struct work_struct *work)
 			}
 			phydev->state = PHY_RUNNING;
 			netif_carrier_on(phydev->attached_dev);
-			phydev->adjust_link(phydev->attached_dev);
+			phydev_adjust_link(phydev);
 		}
 		break;
 	case PHY_FORCING:
@@ -1009,7 +1017,7 @@ void phy_state_machine(struct work_struct *work)
 				needs_aneg = true;
 		}
 
-		phydev->adjust_link(phydev->attached_dev);
+		phydev_adjust_link(phydev);
 		break;
 	case PHY_RUNNING:
 		/* Only register a CHANGE if we are polling and link changed
@@ -1038,7 +1046,7 @@ void phy_state_machine(struct work_struct *work)
 			netif_carrier_off(phydev->attached_dev);
 		}
 
-		phydev->adjust_link(phydev->attached_dev);
+		phydev_adjust_link(phydev);
 
 		if (phy_interrupt_is_valid(phydev))
 			err = phy_config_interrupt(phydev,
@@ -1048,7 +1056,7 @@ void phy_state_machine(struct work_struct *work)
 		if (phydev->link) {
 			phydev->link = 0;
 			netif_carrier_off(phydev->attached_dev);
-			phydev->adjust_link(phydev->attached_dev);
+			phydev_adjust_link(phydev);
 			do_suspend = true;
 		}
 		break;
@@ -1072,7 +1080,7 @@ void phy_state_machine(struct work_struct *work)
 				} else	{
 					phydev->state = PHY_NOLINK;
 				}
-				phydev->adjust_link(phydev->attached_dev);
+				phydev_adjust_link(phydev);
 			} else {
 				phydev->state = PHY_AN;
 				phydev->link_timeout = PHY_AN_TIMEOUT;
@@ -1088,7 +1096,7 @@ void phy_state_machine(struct work_struct *work)
 			} else	{
 				phydev->state = PHY_NOLINK;
 			}
-			phydev->adjust_link(phydev->attached_dev);
+			phydev_adjust_link(phydev);
 		}
 		break;
 	}
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index c4ceb08..f8b6efd 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -663,6 +663,14 @@ static void phy_prepare_link(struct phy_device *phydev,
 	phydev->adjust_link = handler;
 }
 
+void phy_pre_prepare_link(struct phy_device *phydev, void *priv,
+			  void (*handler)(void *))
+{
+	phydev->pre_adjust_link = handler;
+	phydev->pre_adjust_link_priv = priv;
+}
+EXPORT_SYMBOL(phy_pre_prepare_link);
+
 /**
  * phy_connect_direct - connect an ethernet device to a specific phy_device
  * @dev: the network device to connect
diff --git a/include/linux/phy.h b/include/linux/phy.h
index e25f183..20b4ea1 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -427,6 +427,9 @@ struct phy_device {
 	u8 mdix;
 
 	void (*adjust_link)(struct net_device *dev);
+
+	void (*pre_adjust_link)(void *priv);
+	void *pre_adjust_link_priv;
 };
 #define to_phy_device(d) container_of(to_mdio_device(d), \
 				      struct phy_device, mdio)
@@ -761,6 +764,8 @@ struct phy_device *phy_connect(struct net_device *dev, const char *bus_id,
 			       phy_interface_t interface);
 void phy_disconnect(struct phy_device *phydev);
 void phy_detach(struct phy_device *phydev);
+void phy_pre_prepare_link(struct phy_device *phydev, void *priv,
+			  void (*handler)(void *));
 void phy_start(struct phy_device *phydev);
 void phy_stop(struct phy_device *phydev);
 int phy_start_aneg(struct phy_device *phydev);
-- 
2.7.4

