From e2e8d924289df58dbba5d70ed0ed9f9b3812fd75 Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Fri, 15 Apr 2016 13:35:24 +0100
Subject: [PATCH] dma: dw: Add Renesas RZ/N1 support

The RZ/N1 has registers that are used to select the multiplexing
of dma signals to hardware IP blocks.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 Documentation/devicetree/bindings/dma/snps-dma.txt |  7 ++-
 drivers/dma/dw/platform.c                          | 66 +++++++++++++++++++---
 2 files changed, 64 insertions(+), 9 deletions(-)

diff --git a/Documentation/devicetree/bindings/dma/snps-dma.txt b/Documentation/devicetree/bindings/dma/snps-dma.txt
index 0f55832..f7199c1 100644
--- a/Documentation/devicetree/bindings/dma/snps-dma.txt
+++ b/Documentation/devicetree/bindings/dma/snps-dma.txt
@@ -1,7 +1,7 @@
 * Synopsys Designware DMA Controller
 
 Required properties:
-- compatible: "snps,dma-spear1340"
+- compatible: "snps,dma-spear1340" or "snps,dma-rzn1"
 - reg: Address range of the DMAC registers
 - interrupt: Should contain the DMAC interrupt number
 - dma-channels: Number of channels supported by hardware
@@ -21,6 +21,11 @@ Deprecated properties:
 - data_width: Maximum data width supported by hardware per AHB master
   (0 - 8bits, 1 - 16bits, ..., 5 - 256bits)
 
+If compatible with "snps,dma-rzn1", the following properties are required:
+- rzn1_cfg_dmamux: This value is masked with the rzn1_cfg_dmamux_mask value and
+  then written to the RZ/N1 SYSCTRL CFG_DMAMUX register. This register switches
+  dma request signal between different peripherals.
+- rzn1_cfg_dmamux_mask: See rzn1_cfg_dmamux.
 
 Optional properties:
 - interrupt-parent: Should be the phandle for the interrupt controller
diff --git a/drivers/dma/dw/platform.c b/drivers/dma/dw/platform.c
index 5bda0eb..ed4b496 100644
--- a/drivers/dma/dw/platform.c
+++ b/drivers/dma/dw/platform.c
@@ -21,8 +21,12 @@
 #include <linux/dma-mapping.h>
 #include <linux/of.h>
 #include <linux/of_dma.h>
+#include <linux/of_platform.h>
 #include <linux/acpi.h>
 #include <linux/acpi_dma.h>
+#ifdef CONFIG_ARCH_RZN1
+#include <linux/sysctrl-rzn1.h>
+#endif
 
 #include "internal.h"
 
@@ -156,6 +160,48 @@ dw_dma_parse_dt(struct platform_device *pdev)
 }
 #endif
 
+#ifdef CONFIG_ARCH_RZN1
+static int rzn1_dma_init(struct dw_dma_chip *chip)
+{
+	struct device *dev = chip->dev;
+	struct device_node *node = dev->of_node;
+	u32 dmamux;
+	u32 dmamux_mask;
+	u32 val;
+
+	if (of_property_read_u32(node, "rzn1_cfg_dmamux", &dmamux)) {
+		dev_err(dev, "%s missing rzn1_cfg_dmamux property\n",
+			node->full_name);
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(node, "rzn1_cfg_dmamux_mask", &dmamux_mask)) {
+		dev_err(dev, "%s missing rzn1_cfg_dmamux_mask property\n",
+			node->full_name);
+		return -EINVAL;
+	}
+
+	val = rzn1_sysctrl_readl(RZN1_SYSCTRL_REG_CFG_DMAMUX);
+	val &= ~dmamux_mask;
+	val |= dmamux;
+	rzn1_sysctrl_writel(val, RZN1_SYSCTRL_REG_CFG_DMAMUX);
+
+	dev_info(dev, "RZ/N1 init cfg_dmamux=0x%x\n", val);
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_OF
+static const struct of_device_id dw_dma_of_id_table[] = {
+	{ .compatible = "snps,dma-spear1340" },
+#ifdef CONFIG_ARCH_RZN1
+	{ .compatible = "snps,dma-rzn1", .data = rzn1_dma_init },
+#endif
+	{}
+};
+MODULE_DEVICE_TABLE(of, dw_dma_of_id_table);
+#endif
+
 static int dw_probe(struct platform_device *pdev)
 {
 	struct dw_dma_chip *chip;
@@ -163,6 +209,8 @@ static int dw_probe(struct platform_device *pdev)
 	struct resource *mem;
 	const struct dw_dma_platform_data *pdata;
 	int err;
+	const struct of_device_id *of_id;
+	int (*hw_init_fn)(struct dw_dma_chip *);
 
 	chip = devm_kzalloc(dev, sizeof(*chip), GFP_KERNEL);
 	if (!chip)
@@ -214,6 +262,16 @@ static int dw_probe(struct platform_device *pdev)
 	if (ACPI_HANDLE(&pdev->dev))
 		dw_dma_acpi_controller_register(chip->dw);
 
+	/* Custom setup */
+	of_id = of_match_device(dw_dma_of_id_table, chip->dev);
+	if (!of_id || !of_id->data)
+		return -EINVAL;
+	hw_init_fn = of_id->data;
+
+	err = hw_init_fn(chip);
+	if (err)
+		return -EINVAL;
+
 	return 0;
 
 err_dw_dma_probe:
@@ -256,14 +314,6 @@ static void dw_shutdown(struct platform_device *pdev)
 	clk_disable_unprepare(chip->clk);
 }
 
-#ifdef CONFIG_OF
-static const struct of_device_id dw_dma_of_id_table[] = {
-	{ .compatible = "snps,dma-spear1340" },
-	{}
-};
-MODULE_DEVICE_TABLE(of, dw_dma_of_id_table);
-#endif
-
 #ifdef CONFIG_ACPI
 static const struct acpi_device_id dw_dma_acpi_id_table[] = {
 	{ "INTL9C60", 0 },
-- 
2.7.4

